{
  "stats": {
    "suites": 1,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-12-11T23:40:10.806Z",
    "end": "2023-12-11T23:40:43.968Z",
    "duration": 33162
  },
  "results": [
    {
      "uuid": "329dc8ef-10a8-41aa-993f-64a7bb656797",
      "title": "",
      "fullFile": "/Users/vijay_1/Documents/repos/star-wars-api-tests/test/star-wars-api.test.js",
      "file": "/test/star-wars-api.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
          "title": "Star Wars API Tests",
          "fullFile": "/Users/vijay_1/Documents/repos/star-wars-api-tests/test/star-wars-api.test.js",
          "file": "/test/star-wars-api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of all Star Wars characters",
              "fullTitle": "Star Wars API Tests should retrieve a list of all Star Wars characters",
              "timedOut": false,
              "duration": 4288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const characters = await makeRequest(`${swapiUrl}/people`);\nassert.ok(characters.results && characters.results.length > 0, 'No characters returned');",
              "err": {},
              "uuid": "48f07f84-945e-40df-b952-4529468c117e",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve details for a specific Star Wars character",
              "fullTitle": "Star Wars API Tests should retrieve details for a specific Star Wars character",
              "timedOut": false,
              "duration": 1221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const characterName = \"Luke Skywalker\";\nconst characters = await makeRequest(`${swapiUrl}/people`, { search: characterName });\nassert.strictEqual(characters.count, 1, 'Incorrect number of results');\nassert.strictEqual(characters.results[0].name, characterName, 'Incorrect character details');",
              "err": {},
              "uuid": "4702bb7e-2e11-4166-9a13-1c4e73079f2d",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a list of all Star Wars films",
              "fullTitle": "Star Wars API Tests should retrieve a list of all Star Wars films",
              "timedOut": false,
              "duration": 8295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const films = await makeRequest(`${swapiUrl}/films`);\nassert.ok(films.results && films.results.length > 0, 'No films returned');",
              "err": {},
              "uuid": "96ccfe40-4229-4247-8c18-1a7e74421f36",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve details for a specific Star Wars film",
              "fullTitle": "Star Wars API Tests should retrieve details for a specific Star Wars film",
              "timedOut": false,
              "duration": 1735,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const filmTitle = \"A New Hope\";\nconst films = await makeRequest(`${swapiUrl}/films`, { search: filmTitle });\nassert.strictEqual(films.count, 1, 'Incorrect number of results');\nassert.strictEqual(films.results[0].title, filmTitle, 'Incorrect film details');",
              "err": {},
              "uuid": "799c0201-d82e-4070-b0e3-6e9a8e2315cb",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a list of Star Wars starships",
              "fullTitle": "Star Wars API Tests should retrieve a list of Star Wars starships",
              "timedOut": false,
              "duration": 2749,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const starships = await makeRequest(`${swapiUrl}/starships`);\nassert.ok(starships.results && starships.results.length > 0, 'No starships returned');",
              "err": {},
              "uuid": "14d36c28-ecfb-4cbc-9804-ec698bcf12a7",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle non-existing character gracefully",
              "fullTitle": "Star Wars API Tests should handle non-existing character gracefully",
              "timedOut": false,
              "duration": 937,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistingCharacterName = \"NonExistingCharacter123\";\nconst characters = await makeRequest(`${swapiUrl}/people`, { search: nonExistingCharacterName });\nassert.strictEqual(characters.count, 0, 'Results returned for a non-existing character');",
              "err": {},
              "uuid": "191246dc-f432-4dd9-89a3-0fc263efb7fd",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a list of all Star Wars planets",
              "fullTitle": "Star Wars API Tests should retrieve a list of all Star Wars planets",
              "timedOut": false,
              "duration": 5735,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const planets = await makeRequest(`${swapiUrl}/planets`);\nassert.ok(planets.results && planets.results.length > 0, 'No planets returned');",
              "err": {},
              "uuid": "6a387d18-dde2-4df8-a08e-13e7d3c9f7d7",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a list of all Star Wars species",
              "fullTitle": "Star Wars API Tests should retrieve a list of all Star Wars species",
              "timedOut": false,
              "duration": 2660,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const species = await makeRequest(`${swapiUrl}/species`);\nassert.ok(species.results && species.results.length > 0, 'No species returned');",
              "err": {},
              "uuid": "9a04a683-756e-4234-ae44-ff732ade8167",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a list of all Star Wars vehicles",
              "fullTitle": "Star Wars API Tests should retrieve a list of all Star Wars vehicles",
              "timedOut": false,
              "duration": 1434,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const vehicles = await makeRequest(`${swapiUrl}/vehicles`);\nassert.ok(vehicles.results && vehicles.results.length > 0, 'No vehicles returned');",
              "err": {},
              "uuid": "a25a3c3c-89d7-4d2c-8e50-d48c9db2c049",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for an invalid endpoint",
              "fullTitle": "Star Wars API Tests should return 404 for an invalid endpoint",
              "timedOut": false,
              "duration": 819,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await makeRequest(`${swapiUrl}/invalidEndpoint`);\n    // If the request does not throw an error, fail the test\n    assert.fail('Request to an invalid endpoint did not return a 404 status');\n} catch (error) {\n    assert.strictEqual(error.response.status, 404, 'Unexpected status code for an invalid endpoint');\n}",
              "err": {},
              "uuid": "146c96fe-9e88-479f-abf5-455d1ab8cff6",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve details for a specific Star Wars starship",
              "fullTitle": "Star Wars API Tests should retrieve details for a specific Star Wars starship",
              "timedOut": false,
              "duration": 1019,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const starshipName = \"Millennium Falcon\";\nconst starships = await makeRequest(`${swapiUrl}/starships`, { search: starshipName });\nassert.strictEqual(starships.count, 1, 'Incorrect number of results');\nassert.strictEqual(starships.results[0].name, starshipName, 'Incorrect starship details');",
              "err": {},
              "uuid": "0f36424a-08c2-47e0-b418-52cd578639d0",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve details for a specific Star Wars planet",
              "fullTitle": "Star Wars API Tests should retrieve details for a specific Star Wars planet",
              "timedOut": false,
              "duration": 2253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const planetName = \"Tatooine\";\nconst planets = await makeRequest(`${swapiUrl}/planets`, { search: planetName });\nassert.strictEqual(planets.count, 1, 'Incorrect number of results');\nassert.strictEqual(planets.results[0].name, planetName, 'Incorrect planet details');",
              "err": {},
              "uuid": "007c04ee-a98f-4f10-b7a0-a2921ab34e0b",
              "parentUUID": "97f256d9-feed-4103-9d9e-70b6ab4a85f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48f07f84-945e-40df-b952-4529468c117e",
            "4702bb7e-2e11-4166-9a13-1c4e73079f2d",
            "96ccfe40-4229-4247-8c18-1a7e74421f36",
            "799c0201-d82e-4070-b0e3-6e9a8e2315cb",
            "14d36c28-ecfb-4cbc-9804-ec698bcf12a7",
            "191246dc-f432-4dd9-89a3-0fc263efb7fd",
            "6a387d18-dde2-4df8-a08e-13e7d3c9f7d7",
            "9a04a683-756e-4234-ae44-ff732ade8167",
            "a25a3c3c-89d7-4d2c-8e50-d48c9db2c049",
            "146c96fe-9e88-479f-abf5-455d1ab8cff6",
            "0f36424a-08c2-47e0-b418-52cd578639d0",
            "007c04ee-a98f-4f10-b7a0-a2921ab34e0b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 33145,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}